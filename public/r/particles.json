{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "particles",
  "type": "registry:component",
  "title": "Particles",
  "description": "A particles component",
  "dependencies": [
    "react-particle-image"
  ],
  "files": [
    {
      "path": "registry/new-york/particles/particles.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport ParticleImage, {\n    ParticleForce,\n    ParticleOptions,\n    forces,\n} from \"react-particle-image\";\n\nconst darkModeParticleOptions: ParticleOptions = {\n    color: ({ x, y, image }) => {\n        // Get pixel\n        const pixel = image.get(x, y);\n        // Return the color of the pixel\n        return `rgb(${pixel.r}, ${pixel.g}, ${pixel.b})`;\n    },\n};\n\nconst lightModeParticleOptions: ParticleOptions = {\n    color: ({ x, y, image }) => {\n        // Get pixel\n        const pixel = image.get(x, y);\n        // Invert colors - make white pixels black and black pixels white\n        return `rgb(${255 - pixel.r}, ${255 - pixel.g}, ${255 - pixel.b})`;\n    },\n};\n\nconst motionForce = (x: number, y: number): ParticleForce => {\n    return forces.disturbance(x, y, 25);\n};\n\nconst motionForceDown = (x: number, y: number): ParticleForce => {\n    return forces.disturbance(x, y, 100);\n};\n\nexport default function Particles({\n    image = \"https://github.com/github.png\",\n}: {\n    image: string;\n}) {\n    const [isDarkMode, setIsDarkMode] = React.useState(false);\n\n    React.useEffect(() => {\n        // Check if window.matchMedia is available (client-side only)\n        if (typeof window !== \"undefined\") {\n            // Get initial system preference\n            const darkModeQuery = window.matchMedia(\n                \"(prefers-color-scheme: dark)\"\n            );\n            setIsDarkMode(darkModeQuery.matches);\n\n            // Listen for changes in system preference\n            const handler = (e: MediaQueryListEvent) =>\n                setIsDarkMode(e.matches);\n            darkModeQuery.addEventListener(\"change\", handler);\n\n            // Cleanup\n            return () => darkModeQuery.removeEventListener(\"change\", handler);\n        }\n    }, []);\n\n    const scale = 1 / 3;\n    return (\n        <div className=\"justify-center items-center p-4\">\n            <ParticleImage\n                src={image}\n                scale={scale}\n                entropy={30}\n                width={100 * scale}\n                height={100 * scale}\n                maxParticles={20_000}\n                particleOptions={\n                    isDarkMode\n                        ? darkModeParticleOptions\n                        : lightModeParticleOptions\n                }\n                backgroundColor=\"black\"\n                mouseMoveForce={motionForce}\n                mouseDownForce={motionForceDown}\n            />\n        </div>\n    );\n}\n",
      "type": "registry:component"
    }
  ]
}